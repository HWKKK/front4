import 'package:flutter/material.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:flutter/foundation.dart' show defaultTargetPlatform;
import 'package:nompangs/screens/main/chat_screen.dart';
import 'package:nompangs/models/personality_profile.dart';
import 'package:nompangs/services/api_service.dart';

class QRScannerScreen extends StatefulWidget {
  const QRScannerScreen({super.key});

  @override
  _QRScannerScreenState createState() => _QRScannerScreenState();
}

class _QRScannerScreenState extends State<QRScannerScreen> {
  late MobileScannerController controller;
  bool _isProcessing = false;
  final ApiService _apiService = ApiService();

  @override
  void initState() {
    super.initState();
    controller = MobileScannerController();
    print('[QRScannerScreen][${defaultTargetPlatform.name}] initState');
  }

  @override
  void dispose() {
    print('[QRScannerScreen][${defaultTargetPlatform.name}] dispose');
    controller.dispose();
    super.dispose();
  }

  Future<void> _handleQRCode(String code) async {
    if (!mounted || _isProcessing) return;
    
    setState(() { _isProcessing = true; });

    try {
      // QR ÏΩîÎìúÎ°ú ÏùΩÏùÄ Î¨∏ÏûêÏó¥(code)Ïù¥ Î∞îÎ°ú uuidÎùºÍ≥† Í∞ÄÏ†ïÌï©ÎãàÎã§.
      // ÎßåÏïΩ URL ÌòïÌÉúÎùºÎ©¥ ÌååÏã±Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§. 
      // Ïòà: final uuid = Uri.parse(code).queryParameters['id'];
      final String uuid = code; 

      final PersonalityProfile profile = await _apiService.loadProfile(uuid);

      if (mounted) {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            // ChatScreenÏóê profile Í∞ùÏ≤¥ ÌïòÎÇòÎßå Ï†ÑÎã¨Ìï©ÎãàÎã§.
            builder: (context) => ChatScreen(profile: profile),
          ),
        );
      }
    } catch (e) {
      print('üö® QR Ïä§Ï∫î Ï≤òÎ¶¨ Ïã§Ìå®: $e');
      if (mounted) {
        _showError('ÌîÑÎ°úÌïÑÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        setState(() {
          _isProcessing = false; // ÏóêÎü¨ Î∞úÏÉù Ïãú Ïä§Ï∫î Ïû¨Í∞úÎ•º ÏúÑÌï¥ ÏÉÅÌÉú Î≥µÏõê
        });
      }
    } 
    // ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÌïòÎ©¥ Ïù¥ ÌôîÎ©¥ÏùÄ disposeÎêòÎØÄÎ°ú finally Î∏îÎ°ùÏùÄ Î∂àÌïÑÏöî.
  }

  void _showError(String message) {
    if (!mounted) return;
    print('[QRScannerScreen_showError][${defaultTargetPlatform.name}] Ïò§Î•ò: $message');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.black,
        elevation: 0,
        title: const Text(
          'QR ÏΩîÎìú Ïä§Ï∫î',
          style: TextStyle(color: Colors.white),
        ),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: Column(
        children: [
          Expanded(
            child: Stack(
              alignment: Alignment.center,
              children: [
                MobileScanner(
                  controller: controller,
                  onDetect: (capture) {
                    if (!mounted || _isProcessing) {
                      return;
                    }
                    final List<Barcode> barcodes = capture.barcodes;
                    if (barcodes.isNotEmpty && barcodes.first.rawValue != null) {
                      final String scannedCode = barcodes.first.rawValue!;
                      // Ïä§Ï∫îÏù¥ ÏôÑÎ£åÎêòÎ©¥ Ï¶âÏãú Ï≤òÎ¶¨ ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤ΩÌïòÏó¨ Ï§ëÎ≥µ Ïä§Ï∫î Î∞©ÏßÄ
                      setState(() {
                        _isProcessing = true;
                      });
                      _handleQRCode(scannedCode.trim());
                    }
                  },
                ),
                Container(
                  width: MediaQuery.of(context).size.width * 0.7,
                  height: MediaQuery.of(context).size.width * 0.7,
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.green, width: 2),
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                if (_isProcessing)
                  Container(
                    color: Colors.black.withOpacity(0.5),
                    child: const Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          CircularProgressIndicator(valueColor: AlwaysStoppedAnimation<Color>(Colors.white)),
                          SizedBox(height: 16),
                          Text('QR ÏΩîÎìú Ï≤òÎ¶¨ Ï§ë...', style: TextStyle(color: Colors.white, fontSize: 16)),
                        ],
                      ),
                    ),
                  ),
              ],
            ),
          ),
          Container(
            padding: const EdgeInsets.all(20),
            child: const Text(
              'Ï∫êÎ¶≠ÌÑ∞ QR ÏΩîÎìúÎ•º Ïä§Ï∫îÌï¥Ï£ºÏÑ∏Ïöî',
              style: TextStyle(
                color: Colors.white,
                fontSize: 16,
              ),
            ),
          ),
        ],
      ),
    );
  }
}